(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{171:function(t,e,r){"use strict";r.r(e);var n=r(0),s=Object(n.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[r("blockquote",[r("p",[t._v("来源："),r("a",{attrs:{href:"https://www.comp.nus.edu.sg/~cs1101s/sicp/chapters/2",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Elements of Programming"),r("OutboundLink")],1)])]),t._v(" "),r("blockquote",[r("p",[t._v("译者："),r("a",{attrs:{href:"https://iheyunfei.github.io/blog/",target:"_blank",rel:"noopener noreferrer"}},[t._v("塔希"),r("OutboundLink")],1)])]),t._v(" "),r("blockquote",[r("p",[t._v("协议："),r("a",{attrs:{href:"http://creativecommons.org/licenses/by-nc-sa/4.0/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CC BY-NC-SA 4.0"),r("OutboundLink")],1)])]),t._v(" "),r("hr"),t._v(" "),t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),r("p",[t._v("本章中，为了可以专心于构建函数的规则，我们仅仅处理简单的数值型数据[^1]。随后的章节中，我们会认识到这些规则同样使得我们可以构建函数来处理复合的数据。")]),t._v(" "),r("p",[t._v("^1：数值型数据其实并不简单，如何处理数值是计算机常见的难题之一。"),r("a",{attrs:{href:"https://www.comp.nus.edu.sg/~cs1101s/sicp/chapters/2#footnote-1",target:"_blank",rel:"noopener noreferrer"}},[t._v("详见"),r("OutboundLink")],1)]),t._v(" "),t._m(4)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"_1-1-编程的要素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-编程的要素","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.1 编程的要素")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("一门强力的编程语言拥有多种方法来控制电脑完成任务。同时，一门编程语言也表现的犹如一种框架，我们在其中组织自身大脑中关于过程的想法。因此，当我们谈论一门编程语言时，我们应该特别关注语言提供给我们的 "),e("strong",[this._v("如何组合简单从而形成复杂")]),this._v(" 的手段。任何一门强力的语言都有三种机制来帮助做到这点：")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[r("strong",[t._v("原始表达式")]),t._v("——代表一门编程语言中最简单、基础的存在，")]),t._v(" "),r("li",[r("strong",[t._v("组合的手段")]),t._v("——通过这些手段，我们可以把简单的元素组合成复合的元素，以及")]),t._v(" "),r("li",[r("strong",[t._v("抽象的手段")]),t._v("——通过这些手段，我们可以对复合元素命名，并且以单元的形式操控复合元素。")])])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("p",[t._v("编程时，我们与 "),r("strong",[t._v("函数")]),t._v(" 和 "),r("strong",[t._v("数据")]),t._v(" 这两种元素打交道（稍后，我们会发现它们之间的的区别并没有那么明显）。通俗的讲，"),r("strong",[t._v("数据")]),t._v(" 是一种需要被我们操控、处理的“东西”，"),r("strong",[t._v("函数")]),t._v(" 则是一系列规则（对于如何操控、处理数据）的描述。因此，任何强力的编程语言都要有能力表述基础的数据和函数，并且，拥有对函数和数据进行组合和抽象的手段。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_1-1-1-表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-表达式","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.1.1 表达式")])}],!1,null,null,null);e.default=s.exports}}]);